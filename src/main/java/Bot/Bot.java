package Bot;

import Bot.Keyboards.InlineKeyboardMarkupBuilder;
import Bot.Keyboards.ReplyKeyboardMarkupBuilder;
import Models.Products.Accessory;
import Models.Products.Charcoal;
import Service.*;
import Models.Products.Hookah;
import Models.Products.Tobacco;
import org.telegram.telegrambots.ApiContextInitializer;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.TelegramBotsApi;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import org.telegram.telegrambots.meta.exceptions.TelegramApiRequestException;

import java.util.ArrayList;
import java.util.Date;

public class Bot extends TelegramLongPollingBot {

    private static final HookahService HOOKAH_SERVICE = new HookahService();
    private static final TobaccoService TOBACCO_SERVICE = new TobaccoService();
    private static final CartService CART_SERVICE = new CartService();
    private static final AccessoriesService ACCESSORIES_SERVICE = new AccessoriesService();
    private static final CharcoalService CHARCOAL_SERVICE = new CharcoalService();
    private static final VaporizerService VAPORIZER_SERVICE = new VaporizerService();
    private static final ArrayList<String> allCharcoal = CHARCOAL_SERVICE.getAllNamesList();
    private static final ArrayList<String> availableCharcoal = CHARCOAL_SERVICE.getAvailableCharcoalNamesList();
    private static final ArrayList<String> allAccessories = ACCESSORIES_SERVICE.getAllNamesList();
    private static final ArrayList<String> availableAccessories = ACCESSORIES_SERVICE.getAvailableAccessoriesNamesList();
    private static final ArrayList<String> allAccessoryTypes = ACCESSORIES_SERVICE.getAllTypes();
    private static final ArrayList<String> allHookahBrands = HOOKAH_SERVICE.getAllBrandsList();
    private static final ArrayList<String> availableBrands = HOOKAH_SERVICE.getAvailableBrandsList();
    private static final ArrayList<Tobacco> allTobaccos = TOBACCO_SERVICE.getAllTobacco();
    private static final ArrayList<Tobacco> allAvailableTobaccos = TOBACCO_SERVICE.getAllAvailableTobacco();
    private static final ArrayList<String> allTobaccoFortresses = TOBACCO_SERVICE.getAllFortresses();
    private static final ArrayList<String> allAvailableTobaccoFortresses = TOBACCO_SERVICE.getAllAvailableFortresses();

    public static void main(String[] args) {
        ApiContextInitializer.init();
        TelegramBotsApi telegramBotsApi = new TelegramBotsApi();
        try {
            telegramBotsApi.registerBot(new Bot());
        } catch (TelegramApiRequestException e) {
            e.printStackTrace();
        }
    }


    public void onUpdateReceived(Update update) {
        try {
            updateHandle(update);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    public EditMessageText messageHandle(String text, long chat_id, long mes_id) {
        text = text.substring(1);
        EditMessageText editMessageText;
        switch (text) {
            case "–ù–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã":
                editMessageText = InlineKeyboardMarkupBuilder.create(chat_id).rebuild(mes_id);
                editMessageText.setText("–≥. –°–∞–º–∞—Ä–∞, —É–ª. –†–∞–¥–æ–Ω–µ–∂—Å–∫–∞—è, 1\n" +
                        "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–ù ‚Äì –í–°, —Å 12.00 –¥–æ 24.00\n" +
                        "\n" +
                        "–¢–µ–ª–µ—Ñ–æ–Ω: 8 (927) 002-75-57" +
                        "\n" +
                        "\n–≥. –°–∞–º–∞—Ä–∞, –ø—Ä. –ö–∞—Ä–ª–∞ –ú–∞—Ä–∫—Å–∞, 196 (–ñ–ö –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π)\n" +
                        "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–ù ‚Äì –í–°, —Å 12.00 –¥–æ 24.00\n" +
                        "\n" +
                        "–¢–µ–ª–µ—Ñ–æ–Ω: 8 (927) 760-11-17");
                return editMessageText;
            case "–ö–∞—Ç–∞–ª–æ–≥":
                editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("–¢–∞–±–∞–∫–∏", "m–¢–∞–±–∞–∫–∏")
                        .button("–ö–∞–ª—å—è–Ω—ã", "m–ö–∞–ª—å—è–Ω—ã")
                        .endRow()
                        .row()
                        .button("–ê–∫—Å—Å–µ—Å—É–∞—Ä—ã", "m–ê–∫—Å—Å–µ—Å—É–∞—Ä—ã")
                        .button("–£–≥–æ–ª—å", "m–£–≥–æ–ª—å")
                        .endRow()
                        .row()
                        .button("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∏—Å–ø–∞—Ä–∏—Ç–µ–ª–∏", "m–ò—Å–ø–∞—Ä–∏—Ç–µ–ª–∏")
                        .endRow()
                        .row()
                        .button("üìå –ü–æ–º–æ—â—å", "m–ü–æ–º–æ—â—å–ö–∞—Ç–∞–ª–æ–≥")
                        .endRow()
                        .rebuild(mes_id);
                editMessageText.setText("*–ö–∞—Ç–∞–ª–æ–≥ GRIZZLY SHOP*\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:");
                return editMessageText;
            case "–ü–æ–º–æ—â—å–ö–∞—Ç–∞–ª–æ–≥":
                editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("–¢–∞–±–∞–∫–∏", "m–¢–∞–±–∞–∫–∏")
                        .button("–ö–∞–ª—å—è–Ω—ã", "m–ö–∞–ª—å—è–Ω—ã")
                        .endRow()
                        .row()
                        .button("–ê–∫—Å—Å–µ—Å—É–∞—Ä—ã", "m–ê–∫—Å—Å–µ—Å—É–∞—Ä—ã")
                        .button("–£–≥–æ–ª—å", "m–£–≥–æ–ª—å")
                        .endRow()
                        .row()
                        .button("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∏—Å–ø–∞—Ä–∏—Ç–µ–ª–∏", "m–ò—Å–ø–∞—Ä–∏—Ç–µ–ª–∏")
                        .endRow()
                        .rebuild(mes_id);
                editMessageText.setText("*–ö–∞—Ç–∞–ª–æ–≥ GRIZZLY SHOP*\n\n–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n*-* –í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞" +
                        "\n*-* –î–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É\n*-* –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ");
                return editMessageText;
            case "–ù–∞–ª–∏—á–∏–µ":
                editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("–¢–∞–±–∞–∫–∏", "tA/–¢–∞–±–∞–∫–∏")
                        .button("–ö–∞–ª—å—è–Ω—ã", "hA/–ö–∞–ª—å—è–Ω—ã")
                        .endRow()
                        .row()
                        .button("–ê–∫—Å—Å–µ—Å—É–∞—Ä—ã", "m–ê–∫—Å—Å–µ—Å—É–∞—Ä—ã")
                        .button("–£–≥–æ–ª—å", "m–£–≥–æ–ª—å")
                        .endRow()
                        .row()
                        .button("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∏—Å–ø–∞—Ä–∏—Ç–µ–ª–∏", "m–ò—Å–ø–∞—Ä–∏—Ç–µ–ª–∏")
                        .endRow()
                        .row()
                        .button("üìå –ü–æ–º–æ—â—å", "m–ü–æ–º–æ—â—å–ù–∞–ª–∏—á–∏–µ")
                        .endRow()
                        .rebuild(mes_id);
                editMessageText.setText("*–ù–∞–ª–∏—á–∏–µ GRIZZLY SHOP*\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:");
                return editMessageText;
            case "–ü–æ–º–æ—â—å–ù–∞–ª–∏—á–∏–µ":
                editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("–¢–∞–±–∞–∫–∏", "tA/–¢–∞–±–∞–∫–∏")
                        .button("–ö–∞–ª—å—è–Ω—ã", "m–ö–∞–ª—å—è–Ω—ã")
                        .endRow()
                        .row()
                        .button("–ê–∫—Å—Å–µ—Å—É–∞—Ä—ã", "m–ê–∫—Å—Å–µ—Å—É–∞—Ä—ã")
                        .button("–£–≥–æ–ª—å", "m–£–≥–æ–ª—å")
                        .endRow()
                        .row()
                        .button("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∏—Å–ø–∞—Ä–∏—Ç–µ–ª–∏", "m–ò—Å–ø–∞—Ä–∏—Ç–µ–ª–∏")
                        .endRow()
                        .rebuild(mes_id);
                editMessageText.setText("*–ù–∞–ª–∏—á–∏–µ GRIZZLY SHOP*\n\n–î–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n*-* –í—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞" +
                        "\n*-* –î–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É\n*-* –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ");
                return editMessageText;
            case "–ö–∞–ª—å—è–Ω—ã":
                return hookahHandle(text, chat_id, mes_id);
            case "–¢–∞–±–∞–∫–∏":
                return tobaccoHandle(text, chat_id, mes_id);
            case "üõí –ö–æ—Ä–∑–∏–Ω–∞":
                return cartHandle(text, chat_id, mes_id);
            case "–ê–∫—Å—Å–µ—Å—É–∞—Ä—ã":
                return accessoryHandle(text, chat_id, mes_id);
            case "–£–≥–æ–ª—å":
                return charcoalHandle(text, chat_id, mes_id);
        }
        return InlineKeyboardMarkupBuilder.create(chat_id)
                .rebuild(mes_id).setText("*–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ*");
    }

    public SendMessage messageStarter(String text, SendMessage sendMessage) {
        long chat_id = Long.parseLong(sendMessage.getChatId());
        switch (text) {
            case "/start":
                sendMessage = ReplyKeyboardMarkupBuilder.create(chat_id)
                        .setText(" \uD83D\uDD1E *–î–∞–Ω–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ª–∏—Ü " +
                                "—Å—Ç–∞—Ä—à–µ 18 –ª–µ—Ç.*\n\n–ù–∞–∂–∏–º–∞—è –¥–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É, " +
                                "–í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —á—Ç–æ –í–∞–º –∏—Å–ø–æ–ª–Ω–∏–ª–æ—Å—å 18 –ª–µ—Ç")
                        .row()
                        .button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
                        .endRow()
                        .build();
                break;
            case "–ù–∞–∑–∞–¥":
            case "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å":
            case "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
                sendMessage = ReplyKeyboardMarkupBuilder.create(chat_id)
                        .setText("*–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GRIZZLY SHOP!*" +
                                "\n–£ –Ω–∞—Å –≤—ã –Ω–∞–π–¥—ë—Ç–µ –±–æ–ª—å—à–æ–π –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –∫–∞–ª—å—è–Ω–Ω–æ–π " +
                                "–ø—Ä–æ–¥—É–∫—Ü–∏–∏, –≤–∫–ª—é—á–∞—è –≤—Å–µ–≤–æ–∑–º–æ–∂–Ω—ã–µ –∞–∫—Å–µ—Å—É–∞—Ä—ã –∏ –æ–≥—Ä–æ–º–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∞–±–∞–∫–∞!" +
//                                "\n[–ù–∞—à —Å–∞–π—Ç](https://hookahinrussia.ru/)" +
                                "\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —Å–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
                        .row()
                        .button("–ö–∞—Ç–∞–ª–æ–≥")
                        .button("–ù–∞–ª–∏—á–∏–µ")
                        .endRow()
                        .row()
                        .button("üõí –ö–æ—Ä–∑–∏–Ω–∞")
                        .button("–ù–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã")
                        .endRow()
                        .build();
                break;
            case "–ö–∞—Ç–∞–ª–æ–≥":
                sendMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .setText("*–ö–∞—Ç–∞–ª–æ–≥ GRIZZLY SHOP*\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
                        .row()
                        .button("–¢–∞–±–∞–∫–∏", "m–¢–∞–±–∞–∫–∏")
                        .button("–ö–∞–ª—å—è–Ω—ã", "m–ö–∞–ª—å—è–Ω—ã")
                        .endRow()
                        .row()
                        .button("–ê–∫—Å—Å–µ—Å—É–∞—Ä—ã", "m–ê–∫—Å—Å–µ—Å—É–∞—Ä—ã")
                        .button("–£–≥–æ–ª—å", "m–£–≥–æ–ª—å")
                        .endRow()
                        .row()
                        .button("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∏—Å–ø–∞—Ä–∏—Ç–µ–ª–∏", "m–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∏—Å–ø–∞—Ä–∏—Ç–µ–ª–∏")
                        .endRow()
                        .row()
                        .button("üìå –ü–æ–º–æ—â—å", "m–ü–æ–º–æ—â—å–ö–∞—Ç–∞–ª–æ–≥")
                        .endRow()
                        .build();
                break;
            case "–ù–∞–ª–∏—á–∏–µ":
                sendMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .setText("*–ù–∞–ª–∏—á–∏–µ GRIZZLY SHOP*\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ —Ç–æ–≤–∞—Ä–∞:")
                        .row()
                        .button("–¢–∞–±–∞–∫–∏", "tA/–¢–∞–±–∞–∫–∏")
                        .button("–ö–∞–ª—å—è–Ω—ã", "hA/–ö–∞–ª—å—è–Ω—ã")
                        .endRow()
                        .row()
                        .button("–ê–∫—Å—Å–µ—Å—É–∞—Ä—ã", "aA/–ê–∫—Å–µ—Å—É–∞—Ä—ã")
                        .button("–£–≥–æ–ª—å", "uA/–£–≥–æ–ª—å")
                        .endRow()
                        .row()
                        .button("–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –∏—Å–ø–∞—Ä–∏—Ç–µ–ª–∏", "eA/–ò—Å–ø–∞—Ä–∏—Ç–µ–ª–∏")
                        .endRow()
                        .row()
                        .button("üìå –ü–æ–º–æ—â—å", "m–ü–æ–º–æ—â—å–ù–∞–ª–∏—á–∏–µ")
                        .endRow()
                        .build();
                break;
            case "üõí –ö–æ—Ä–∑–∏–Ω–∞":
                sendMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .setText(CART_SERVICE.getUserCart(chat_id).toString())
                        .row()
                        .button(" \uD83D\uDCE6 –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", "c–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
                        .endRow()
                        .row()
                        .button("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", "c–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
                        .endRow()
                        .build();
                break;
            case "–ù–∞—à–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã":
                sendMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .setText("–≥. –°–∞–º–∞—Ä–∞, —É–ª. –†–∞–¥–æ–Ω–µ–∂—Å–∫–∞—è, 1\n" +
                                "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–ù ‚Äì –í–°, —Å 12.00 –¥–æ 24.00\n" +
                                "\n" +
                                "–¢–µ–ª–µ—Ñ–æ–Ω: 8 (927) 002-75-57" +
                                "\n" +
                                "\n–≥. –°–∞–º–∞—Ä–∞, –ø—Ä. –ö–∞—Ä–ª–∞ –ú–∞—Ä–∫—Å–∞, 196 (–ñ–ö –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π)\n" +
                                "–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: –ü–ù ‚Äì –í–°, —Å 12.00 –¥–æ 24.00\n" +
                                "\n" +
                                "–¢–µ–ª–µ—Ñ–æ–Ω: 8 (927) 760-11-17")
                        .build();
                break;
        }
        return sendMessage;
    }

    public EditMessageText availableHookahHandle(String text, long chat_id, long mes_id) {
        text = text.substring(3);
        EditMessageText editMessage;
        if (availableBrands.contains(text)) {
            ArrayList<Hookah> hookahs = HOOKAH_SERVICE.getAvailableHookahsByBrand(text);
            editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                    .hookahButtons(hookahs)
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "hA/–ö–∞–ª—å—è–Ω—ã")
                    .endRow()
                    .rebuild(mes_id);
            editMessage.setText("–¢–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞ " + text + ": ");
        } else if (text.contains("&")) {
            Hookah cartHookah;
            long id = Long.parseLong(text.split("&")[1].split("\\?")[0]);
            cartHookah = HOOKAH_SERVICE.getHookahById(id);
            if (text.contains("up")) {
                int count = Integer.parseInt(text.split("&")[1].split("\\?")[1]);
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .countButtons("hA/&" + id + "?" + ++count)
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "hA/id" + id)
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("üè∑ *" + cartHookah.getBrand() + "* | " + cartHookah.getName() +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + cartHookah.getPrice() + " —Ä—É–±. *\n`(—Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ –ø–æ–ª–Ω—ã–π –∫–æ–º–ª–µ–∫—Ç)`" +
                        "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");
            } else if (text.contains("down")) {
                int count = Integer.parseInt(text.split("&")[1].split("\\?")[1]);
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .countButtons("hA/&" + id + "?" + --count)
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "hA/id" + id)
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("üè∑ *" + cartHookah.getBrand() + "* | " + cartHookah.getName() +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + cartHookah.getPrice() + " —Ä—É–±. *\n`(—Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ –ø–æ–ª–Ω—ã–π –∫–æ–º–ª–µ–∫—Ç)`" +
                        "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");
            } else if (text.contains("crt")) {
                int count = Integer.parseInt(text.split("&")[1].split("\\?")[1]);
                cartHookah.setCount(count);
                CART_SERVICE.addToCart(cartHookah, chat_id);
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("–£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", "hA/" + id + "del")
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "hA/–¢–∞–±–∞–∫–∏")
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("üè∑ *" + cartHookah.getBrand() + "* | " + cartHookah.getName() +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + cartHookah.getPrice() + " —Ä—É–±. *\n`(—Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ –ø–æ–ª–Ω—ã–π –∫–æ–º–ª–µ–∫—Ç)`" +
                        "\n\n" + cartHookah.getDescription().trim() +
                        "\n[_](" + cartHookah.getImg() + ")");
            } else {
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .countButtons("hA/&" + id + "?" + "1")
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "hA/id" + id)
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("üè∑ *" + cartHookah.getBrand() + "* | " + cartHookah.getName() +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + cartHookah.getPrice() + " —Ä—É–±. *\n`(—Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ –ø–æ–ª–Ω—ã–π –∫–æ–º–ª–µ–∫—Ç)`" +
                        "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");
            }
        } else if (text.contains("id")) {
            Hookah idHookah = HOOKAH_SERVICE.getHookahById(Long.parseLong(text.replace("id", "")));
            editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                    .row()
                    .button("üõí –í –∫–æ—Ä–∑–∏–Ω—É", "hA/&" + idHookah.getId() + "?")
                    .endRow()
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "hA/–ö–∞–ª—å—è–Ω—ã")
                    .endRow()
                    .rebuild(mes_id);
            editMessage.setText("üè∑ *" + idHookah.getBrand() + "* | " + idHookah.getName() +
                    "\n\nüíµ –¶–µ–Ω–∞:  *" + idHookah.getPrice() + " —Ä—É–±. *\n`(—Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ –ø–æ–ª–Ω—ã–π –∫–æ–º–ª–µ–∫—Ç)`" +
                    "\n\n" + idHookah.getDescription().trim() +
                    "\n[_](" + idHookah.getImg() + ")");
        } else if (text.contains("del")) {
            Hookah delHookah = HOOKAH_SERVICE.getHookahById(Long.parseLong(text.replace("del", "")));
            CART_SERVICE.deleteFromCart(delHookah, chat_id);
            editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                    .row()
                    .button("üõí –í –∫–æ—Ä–∑–∏–Ω—É", "hA/&" + delHookah.getId() + "?")
                    .endRow()
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "hA/–ö–∞–ª—å—è–Ω—ã")
                    .endRow()
                    .rebuild(mes_id);
            editMessage.setText("üè∑ *" + delHookah.getName() + "*" +
                    "\n\nüíµ –¶–µ–Ω–∞:  *" + delHookah.getPrice() + " —Ä—É–±.*" +
                    "\n\n" + delHookah.getDescription().trim() +
                    "\n[_](" + delHookah.getImg() + ")");
        } else {
            editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                    .buttons(availableBrands, "hA/")
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "m–ù–∞–ª–∏—á–∏–µ")
                    .endRow()
                    .rebuild(mes_id);
            editMessage.setText("*–ù–∞–ª–∏—á–∏–µ / –ö–∞–ª—å—è–Ω—ã*\n–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∫–∞–ª—å—è–Ω–∞:");
        }
        return editMessage.setParseMode("Markdown");
    }

    public EditMessageText hookahHandle(String text, long chat_id, long mes_id) {
        text = text.substring(1);
        EditMessageText editMessage;
        Hookah currHookah;
        if (allHookahBrands.contains(text)) {
            ArrayList<Hookah> hookahs = HOOKAH_SERVICE.getHookahsByBrand(text);
            editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                    .hookahButtons(hookahs)
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "h–ö–∞–ª—å—è–Ω—ã")
                    .endRow()
                    .rebuild(mes_id);
            editMessage.setText("–¢–æ–≤–∞—Ä—ã –±—Ä–µ–Ω–¥–∞ " + text + ": ");
        } else if (text.contains("&")) {
            Hookah cartHookah;
            long id = Long.parseLong(text.split("&")[1].split("\\?")[0]);
            cartHookah = HOOKAH_SERVICE.getHookahById(id);
            if (text.contains("up")) {
                int count = Integer.parseInt(text.split("&")[1].split("\\?")[1]);
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .countButtons("h&" + id + "?" + ++count)
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "hid" + id)
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("üè∑ *" + cartHookah.getBrand() + "* | " + cartHookah.getName() +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + cartHookah.getPrice() + " —Ä—É–±. *\n`(—Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ –ø–æ–ª–Ω—ã–π –∫–æ–º–ª–µ–∫—Ç)`" +
                        "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");
            } else if (text.contains("down")) {
                int count = Integer.parseInt(text.split("&")[1].split("\\?")[1]);
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .countButtons("h&" + id + "?" + --count)
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "hid" + id)
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("üè∑ *" + cartHookah.getBrand() + "* | " + cartHookah.getName() +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + cartHookah.getPrice() + " —Ä—É–±. *\n`(—Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ –ø–æ–ª–Ω—ã–π –∫–æ–º–ª–µ–∫—Ç)`" +
                        "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");
            } else if (text.contains("crt")) {
                int count = Integer.parseInt(text.split("&")[1].split("\\?")[1]);
                cartHookah.setCount(count);
                CART_SERVICE.addToCart(cartHookah, chat_id);
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("–£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", "h" + id + "del")
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "h–¢–∞–±–∞–∫–∏")
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("üè∑ *" + cartHookah.getBrand() + "* | " + cartHookah.getName() +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + cartHookah.getPrice() + " —Ä—É–±. *\n`(—Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ –ø–æ–ª–Ω—ã–π –∫–æ–º–ª–µ–∫—Ç)`" +
                        "\n\n" + cartHookah.getDescription().trim() +
                        "\n[_](" + cartHookah.getImg() + ")");
            } else {
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .countButtons("h&" + id + "?" + "1")
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "hid" + id)
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("üè∑ *" + cartHookah.getBrand() + "* | " + cartHookah.getName() +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + cartHookah.getPrice() + " —Ä—É–±. *\n`(—Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ –ø–æ–ª–Ω—ã–π –∫–æ–º–ª–µ–∫—Ç)`" +
                        "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");
            }
        } else if (text.contains("id")) {
            currHookah = HOOKAH_SERVICE.getHookahById(Long.parseLong(text.replace("id", "")));
            if (currHookah.isAvailable()) {
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("üõí –í –∫–æ—Ä–∑–∏–Ω—É", "h&" + currHookah.getId() + "?")
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "h–ö–∞–ª—å—è–Ω—ã")
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("üè∑ *" + currHookah.getBrand() + "* | " + currHookah.getName() +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + currHookah.getPrice() + " —Ä—É–±. *\n`(—Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ –ø–æ–ª–Ω—ã–π –∫–æ–º–ª–µ–∫—Ç)`" +
                        "\n\n" + currHookah.getDescription().trim() +
                        "\n[_](" + currHookah.getImg() + ")");
            } else {
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "h–ö–∞–ª—å—è–Ω—ã")
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("üè∑ *" + currHookah.getBrand() + "* | " + currHookah.getName() + " \n_(–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏)_" +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + currHookah.getPrice() + " —Ä—É–±. *\n`(—Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ –ø–æ–ª–Ω—ã–π –∫–æ–º–ª–µ–∫—Ç)`" +
                        "\n\n" + currHookah.getDescription().trim() +
                        "\n[_](" + currHookah.getImg() + ")");
            }
        } else if (text.contains("del")) {
            Hookah delHookah = HOOKAH_SERVICE.getHookahById(Long.parseLong(text.replace("del", "")));
            CART_SERVICE.deleteFromCart(delHookah, chat_id);
            editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                    .row()
                    .button("üõí –í –∫–æ—Ä–∑–∏–Ω—É", "h&" + delHookah.getId() + "?")
                    .endRow()
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "h–ö–∞–ª—å—è–Ω—ã")
                    .endRow()
                    .rebuild(mes_id);
            editMessage.setText("üè∑ *" + delHookah.getName() + "*" +
                    "\n\nüíµ –¶–µ–Ω–∞:  *" + delHookah.getPrice() + " —Ä—É–±.*" +
                    "\n\n" + delHookah.getDescription().trim() +
                    "\n[_](" + delHookah.getImg() + ")");
        } else {
            editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                    .buttons(allHookahBrands, "h")
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "m–ö–∞—Ç–∞–ª–æ–≥")
                    .endRow()
                    .rebuild(mes_id);
            editMessage.setText("*–ö–∞—Ç–∞–ª–æ–≥ / –ö–∞–ª—å—è–Ω—ã*\n–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∫–∞–ª—å—è–Ω–∞:");
        }
        return editMessage.setParseMode("Markdown");
    }

    public EditMessageText availableCharcoalHandle(String text, long chat_id, long mes_id) {
        text = text.substring(3);
        EditMessageText editMessageText;
        if (text.contains("$")) {
            Charcoal cartCharcoal;
            long id = Long.parseLong(text.split("&")[1].split("\\?")[0]);
            cartCharcoal = CHARCOAL_SERVICE.getCharcoalById(id);
            if (text.contains("up")) {
                int count = Integer.parseInt(text.split("&")[1].split("\\?")[1]);
                editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .countButtons("uA/&" + id + "?" + ++count)
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "uA/id" + id)
                        .endRow()
                        .rebuild(mes_id);
                editMessageText.setText("üè∑ *" + cartCharcoal.getName() + "* | " +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + cartCharcoal.getPrice() + " —Ä—É–±. *" +
                        "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");

            } else if (text.contains("down")) {
                int count = Integer.parseInt(text.split("&")[1].split("\\?")[1]);
                editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .countButtons("uA/&" + id + "?" + --count)
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "uA/id" + id)
                        .endRow()
                        .rebuild(mes_id);
                editMessageText.setText("üè∑ *" + cartCharcoal.getName() + "* | " +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + cartCharcoal.getPrice() + " —Ä—É–±. *" +
                        "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");
            } else if (text.contains("crt")) {
                int count = Integer.parseInt(text.split("&")[1].split("\\?")[1]);
                cartCharcoal.setCount(count);
                CART_SERVICE.addToCart(cartCharcoal, chat_id);
                editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("–£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", "uA/" + id + "del")
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "uA/–£–≥–æ–ª—å")
                        .endRow()
                        .rebuild(mes_id);
                editMessageText.setText("üè∑ *" + cartCharcoal.getName() + "* | " +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + cartCharcoal.getPrice() + " —Ä—É–±. *" +
                        "\n\n" + cartCharcoal.getDescription().trim() +
                        "\n[_](" + cartCharcoal.getImg() + ")");

            } else {
                editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .countButtons("uA/&" + id + "?" + "1")
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "uA/id" + id)
                        .endRow()
                        .rebuild(mes_id);
                editMessageText.setText("üè∑ *" + cartCharcoal.getName() + "* | " +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + cartCharcoal.getPrice() + " —Ä—É–±. *" +
                        "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");
            }

        } else if (text.contains("id")) {
            Charcoal idCharcoal = CHARCOAL_SERVICE.getCharcoalById(Long.parseLong(text.replace("id", "")));
            editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                    .row()
                    .button("üõí –í –∫–æ—Ä–∑–∏–Ω—É", "uA/&" + idCharcoal.getId() + "?")
                    .endRow()
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "uA/–£–≥–æ–ª—å")
                    .endRow()
                    .rebuild(mes_id);
            editMessageText.setText("üè∑ *" + idCharcoal.getName() + "* | " +
                    "\n\nüíµ –¶–µ–Ω–∞:  *" + idCharcoal.getPrice() + " —Ä—É–±. *" +
                    "\n\n" + idCharcoal.getDescription().trim() +
                    "\n[_](" + idCharcoal.getImg() + ")");

        } else if (text.contains("del")) {
            Charcoal delCharcoal = CHARCOAL_SERVICE.getCharcoalById(Long.parseLong(text.replace("del", "")));
            CART_SERVICE.deleteFromCart(delCharcoal, chat_id);
            editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                    .row()
                    .button("üõí –í –∫–æ—Ä–∑–∏–Ω—É", "uA/&" + delCharcoal.getId() + "?")
                    .endRow()
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "uA/–£–≥–æ–ª—å")
                    .endRow()
                    .rebuild(mes_id);
            editMessageText.setText("üè∑ *" + delCharcoal.getName() + "*" +
                    "\n\nüíµ –¶–µ–Ω–∞:  *" + delCharcoal.getPrice() + " —Ä—É–±.*" +
                    "\n\n" + delCharcoal.getDescription().trim() +
                    "\n[_](" + delCharcoal.getImg() + ")");
        } else {
            editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                    .charcoalButtons(CHARCOAL_SERVICE.getAvailableCharcoal())
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "m–ù–∞–ª–∏—á–∏–µ")
                    .endRow()
                    .rebuild(mes_id);
            editMessageText.setText("*–ö–∞—Ç–∞–ª–æ–≥ / –£–≥–æ–ª—å*\n–í—ã–±–µ—Ä–∏—Ç–µ –£–≥–æ–ª—å:");
        }

        return editMessageText.setParseMode("Markdown");

    }

    public EditMessageText charcoalHandle(String text, long chat_id, long mes_id) {
        text = text.substring(1);
        EditMessageText editMessageText;
        Charcoal currCharcoal;
        if (text.contains("&")) {
            Charcoal cartCharcoal;
            long id = Long.parseLong(text.split("&")[1].split("\\?")[0]);
            cartCharcoal = CHARCOAL_SERVICE.getCharcoalById(id);
            if (text.contains("up")) {
                int count = Integer.parseInt(text.split("&")[1].split("\\?")[1]);
                editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .countButtons("u&" + id + "?" + ++count)
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "uid" + id)
                        .endRow()
                        .rebuild(mes_id);
                editMessageText.setText("üè∑ *" + cartCharcoal.getName() + "* | " +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + cartCharcoal.getPrice() + " —Ä—É–±. *" +
                        "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");

            } else if (text.contains("down")) {
                int count = Integer.parseInt(text.split("&")[1].split("\\?")[1]);
                editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .countButtons("u&" + id + "?" + --count)
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "uid" + id)
                        .endRow()
                        .rebuild(mes_id);
                editMessageText.setText("üè∑ *" + cartCharcoal.getName() + "* | " +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + cartCharcoal.getPrice() + " —Ä—É–±. *" +
                        "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");
            } else if (text.contains("crt")) {
                int count = Integer.parseInt(text.split("&")[1].split("\\?")[1]);
                cartCharcoal.setCount(count);
                CART_SERVICE.addToCart(cartCharcoal, chat_id);
                editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("–£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", "u" + id + "del")
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "u–£–≥–æ–ª—å")
                        .endRow()
                        .rebuild(mes_id);
                editMessageText.setText("üè∑ *" + cartCharcoal.getName() + "* | " +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + cartCharcoal.getPrice() + " —Ä—É–±. *" +
                        "\n\n" + cartCharcoal.getDescription().trim() +
                        "\n[_](" + cartCharcoal.getImg() + ")");

            } else {
                editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .countButtons("u&" + id + "?" + "1")
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "uid" + id)
                        .endRow()
                        .rebuild(mes_id);
                editMessageText.setText("üè∑ *" + cartCharcoal.getName() + "* | " +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + cartCharcoal.getPrice() + " —Ä—É–±. *" +
                        "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");
            }

        } else if (text.contains("id")) {
            currCharcoal = CHARCOAL_SERVICE.getCharcoalById(Long.parseLong(text.replace("id", "")));
            if (currCharcoal.isAvailable()) {
                editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("üõí –í –∫–æ—Ä–∑–∏–Ω—É", "u&" + currCharcoal.getId() + "?")
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "u–£–≥–æ–ª—å")
                        .endRow()
                        .rebuild(mes_id);
                editMessageText.setText("üè∑ *" + currCharcoal.getName() + "* | " +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + currCharcoal.getPrice() + " —Ä—É–±.*" +
                        "\n\n" + currCharcoal.getDescription().trim() +
                        "\n[_](" + currCharcoal.getImg() + ")");
            } else {
                editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "u–£–≥–æ–ª—å")
                        .endRow()
                        .rebuild(mes_id);
                editMessageText.setText("üè∑ *" + currCharcoal.getName() + "* | " + " \n_(–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏)_" +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + currCharcoal.getPrice() + " —Ä—É–±.*" +
                        "\n\n" + currCharcoal.getDescription().trim() +
                        "\n[_](" + currCharcoal.getImg() + ")");
            }
        } else if (text.contains("del")) {
            Charcoal delCharcoal = CHARCOAL_SERVICE.getCharcoalById(Long.parseLong(text.replace("del", "")));
            CART_SERVICE.deleteFromCart(delCharcoal, chat_id);
            editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                    .row()
                    .button("üõí –í –∫–æ—Ä–∑–∏–Ω—É", "u&" + delCharcoal.getId() + "?")
                    .endRow()
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "u–£–≥–æ–ª—å")
                    .endRow()
                    .rebuild(mes_id);
            editMessageText.setText("üè∑ *" + delCharcoal.getName() + "*" +
                    "\n\nüíµ –¶–µ–Ω–∞:  *" + delCharcoal.getPrice() + " —Ä—É–±.*" +
                    "\n\n" + delCharcoal.getDescription().trim() +
                    "\n[_](" + delCharcoal.getImg() + ")");
        } else {
            editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                    .charcoalButtons(CHARCOAL_SERVICE.getAllCharcoal())
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "m–ö–∞—Ç–∞–ª–æ–≥")
                    .endRow()
                    .rebuild(mes_id);
            editMessageText.setText("*–ö–∞—Ç–∞–ª–æ–≥ / –£–≥–æ–ª—å*\n–í—ã–±–µ—Ä–∏—Ç–µ –£–≥–æ–ª—å:");
        }
        return editMessageText.setParseMode("Markdown");
    }

    public EditMessageText accessoryHandle(String text, long chat_id, long mes_id) {
        text = text.substring(1);
        EditMessageText editMessageText;
        Accessory currAccessory;
        if (allAccessoryTypes.contains(text)) {
            ArrayList<Accessory> accessories = ACCESSORIES_SERVICE.getAccessoriesByType(text);
            editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                    .accessoryButtons(accessories)
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "a–ê–∫—Å—Å–µ—Å—É–∞—Ä—ã")
                    .endRow()
                    .rebuild(mes_id);
            editMessageText.setText("*–ö–∞—Ç–∞–ª–æ–≥ / –ê–∫—Å—Å–µ—Å—É–∞—Ä—ã*\n–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ê–∫—Å—Å–µ—Å—É–∞—Ä–æ–≤: " + text);
        } else if (text.contains("crt")) {
            currAccessory = ACCESSORIES_SERVICE.getAccessoryById(Long.parseLong(text.replace("crt", "")));
            CART_SERVICE.addToCart(currAccessory, chat_id);
            editMessageText = InlineKeyboardMarkupBuilder
                    .create(chat_id)
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "anal")
                    .endRow()
                    .rebuild(mes_id);
            editMessageText.setText("–¢–æ–≤–∞—Ä: " + currAccessory.getName() + "\n–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É");

        } else if (text.contains("id")) {
            currAccessory = ACCESSORIES_SERVICE.getAccessoryById(Long.parseLong(text.replace("id", "")));
            if (currAccessory.isAvailable()) {
                editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("üõí –í –∫–æ—Ä–∑–∏–Ω—É", "a" + currAccessory.getId() + "crt")
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "anal")
                        .endRow()
                        .rebuild(mes_id);
                editMessageText.setText("üè∑ *" + currAccessory.getName() + "* | " +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + currAccessory.getPrice() + " —Ä—É–±.*" +
                        "\n\n" + currAccessory.getDescription().trim() +
                        "\n[_](" + currAccessory.getImg() + ")");
            } else {
                editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "a–ê–∫—Å—Å–µ—Å—É–∞—Ä—ã")
                        .endRow()
                        .rebuild(mes_id);
                editMessageText.setText("üè∑ *" + currAccessory.getName() + "* | " + " \n_(–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏)_" +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + currAccessory.getPrice() + " —Ä—É–±.*" +
                        "\n\n" + currAccessory.getDescription().trim() +
                        "\n[_](" + currAccessory.getImg() + ")");
            }
        } else if (text.contains("nal")) {
            editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                    .buttons(allAccessoryTypes, "aavl")
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "m–ù–∞–ª–∏—á–∏–µ")
                    .endRow()
                    .rebuild(mes_id);
            editMessageText.setText("*–ù–∞–ª–∏—á–∏–µ / –ê–∫—Å—Å–µ—Å—É–∞—Ä—ã*\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∞–∫—Å—Å–µ—Å—É–∞—Ä–æ–≤:");

        } else if (text.contains("avl")) {
            ArrayList<Accessory> accessories = ACCESSORIES_SERVICE.getAvailableAccessoriesByType(text.replace("avl", ""));
            editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                    .accessoryButtons(accessories)
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "anal")
                    .endRow()
                    .rebuild(mes_id);
            editMessageText.setText("*–ù–∞–ª–∏—á–∏–µ / –ê–∫—Å—Å–µ—Å—É–∞—Ä—ã*\n–ê–∫—Å—Å–µ—Å—É–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ " + text + ": ");
        } else {
            editMessageText = InlineKeyboardMarkupBuilder.create(chat_id)
                    .buttons(allAccessoryTypes, "a")
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "m–ö–∞—Ç–∞–ª–æ–≥")
                    .endRow()
                    .rebuild(mes_id);
            editMessageText.setText("*–ö–∞—Ç–∞–ª–æ–≥ / –ê–∫—Å—Å–µ—Å—É–∞—Ä—ã*\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:");

        }
        return editMessageText.setParseMode("Markdown");
    }

    public EditMessageText availableTobaccoHandle(String text, long chat_id, long mes_id) {
        text = text.substring(3);
        EditMessageText editMessage;
        if (allAvailableTobaccoFortresses.contains(text)) {
            ArrayList<Tobacco> tobaccos = TOBACCO_SERVICE.getTobaccoByFortress(text, allAvailableTobaccos);
            editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                    .tobaccoButtons(tobaccos, "tA/", "")
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "tA/–¢–∞–±–∞–∫–∏")
                    .endRow()
                    .rebuild(mes_id);
            editMessage.setText("*–ù–∞–ª–∏—á–∏–µ / –¢–∞–±–∞–∫–∏*\n–¢–∞–±–∞–∫–∏ –∫—Ä–µ–ø–æ—Å—Ç–∏: " + text);
        } else if (text.contains("cart")) {
            Tobacco crtTobacco = TOBACCO_SERVICE.getTobaccoById(Long.parseLong(text.replace("cart", "")));
            if (crtTobacco.getRadonejskayaTastes() != null && !crtTobacco.getRadonejskayaTastes().isEmpty()
                    && !crtTobacco.getRadonejskayaTastes().get(0).equals("null") && crtTobacco.getKarlaMarksaTastes() != null
                    && !crtTobacco.getKarlaMarksaTastes().isEmpty() && !crtTobacco.getKarlaMarksaTastes().get(0).equals("null")) {
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("–£–ª. –†–∞–¥–æ–Ω–µ–∂—Å–∫–∞—è 1", "tA/" + crtTobacco.getId() + "RadTastes")
                        .endRow()
                        .row()
                        .button("–£–ª. –ü—Ä–æ—Å–ø–µ–∫—Ç –ö–∞—Ä–ª–∞ –ú–∞—Ä–∫—Å–∞ 196", "tA/" + crtTobacco.getId() + "KarTastes")
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tA/id" + crtTobacco.getId())
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞–±–∞–∫–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –≤–∫—É—Å—ã:\n\n"
                        + "*—É–ª. –†–∞–¥–æ–Ω–µ–∂—Å–∫–∞—è 1* | `" + crtTobacco.getRadonejskayaTastes().toString().replace("{", "")
                        .replace("}", "") + "`\n\n*–ü—Ä–æ—Å–ø–µ–∫—Ç –ö–∞—Ä–ª–∞ –ú–∞—Ä–∫—Å–∞ 196* | `"
                        + crtTobacco.getKarlaMarksaTastes().toString().replace("{", "")
                        .replace("}", "") + "`\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:");
            } else if (crtTobacco.getKarlaMarksaTastes() == null || crtTobacco.getKarlaMarksaTastes().isEmpty()
                    || crtTobacco.getKarlaMarksaTastes().get(0).equals("null")) {
                ArrayList<String> allTastes = crtTobacco.getRadonejskayaTastes();
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .buttons(allTastes, "tA/&" + crtTobacco.getId() + "?")
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tA/id" + crtTobacco.getId())
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("–î–∞–Ω–Ω—ã–π —Ç–∞–±–∞–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É *–£–ª. –†–∞–¥–æ–Ω–µ–∂—Å–∫–∞—è 1*.\n\n" +
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∫—É—Å:");
            } else {
                ArrayList<String> allTastes = crtTobacco.getKarlaMarksaTastes();
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .buttons(allTastes, "tA/&" + crtTobacco.getId() + "?")
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tA/id" + crtTobacco.getId())
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("–î–∞–Ω–Ω—ã–π —Ç–∞–±–∞–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É *–ü—Ä–æ—Å–ø–µ–∫—Ç –ö–∞—Ä–ª–∞ –ú–∞—Ä–∫—Å–∞ 196*.\n\n" +
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∫—É—Å:");
            }
        } else if (text.contains("&")) {
            Tobacco tasteTobacco;
            long id = Long.parseLong(text.split("&")[1].split("\\?")[0]);
            String taste = text.split("&")[1].split("\\?")[1];
            tasteTobacco = TOBACCO_SERVICE.getTobaccoById(id);
            tasteTobacco.setTaste(taste);
            if (text.contains("up")) {
                int count = Integer.parseInt(text.split("&")[1].split("\\?")[2]);
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .countButtons("tA/&" + id + "?" + taste + "?" + ++count)
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tid" + id)
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("–¢–æ–≤–∞—Ä: *" + tasteTobacco.getName() + "*\n–í–∫—É—Å: " + taste +
                        "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");
            } else if (text.contains("down")) {
                int count = Integer.parseInt(text.split("&")[1].split("\\?")[2]);
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .countButtons("tA/&" + id + "?" + taste + "?" + --count)
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tid" + id)
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("–¢–æ–≤–∞—Ä: *" + tasteTobacco.getName() + "*\n–í–∫—É—Å: " + taste +
                        "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");
            } else if (text.contains("crt")) {
                int count = Integer.parseInt(text.split("&")[1].split("\\?")[2]);
                tasteTobacco.setCount(count);
                CART_SERVICE.addToCart(tasteTobacco, chat_id);
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("–£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", "t" + id + "delt")
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tA/–¢–∞–±–∞–∫–∏")
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("üè∑ *" + tasteTobacco.getName() + "*" +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + tasteTobacco.getPrice() + " —Ä—É–±.*" +
                        "\n\n" + tasteTobacco.getDescription().trim() +
                        "\n[_](" + tasteTobacco.getImg() + ")");
            } else {
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .countButtons("tA/&" + id + "?" + taste + "?" + "1")
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tid" + id)
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("–¢–æ–≤–∞—Ä: *" + tasteTobacco.getName() + "*\n–í–∫—É—Å: " + tasteTobacco.getTaste() +
                        "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");
            }
        } else if (text.contains("delt")) {
            Tobacco delTobacco = TOBACCO_SERVICE.getTobaccoById(Long.parseLong(text.replace("delt", "")));
            CART_SERVICE.deleteFromCart(delTobacco, chat_id);
            editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                    .row()
                    .button("üõí –í –∫–æ—Ä–∑–∏–Ω—É", "tA/" + delTobacco.getId() + "crt")
                    .endRow()
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "tA/–¢–∞–±–∞–∫–∏")
                    .endRow()
                    .rebuild(mes_id);
            editMessage.setText("üè∑ *" + delTobacco.getName() + "*" +
                    "\n\nüíµ –¶–µ–Ω–∞:  *" + delTobacco.getPrice() + " —Ä—É–±.*" +
                    "\n\n" + delTobacco.getDescription().trim() +
                    "\n[_](" + delTobacco.getImg() + ")");
        } else if (text.contains("id")) {
            Tobacco idTobacco = TOBACCO_SERVICE.getTobaccoById(Long.parseLong(text.replace("id", "")));
            if (idTobacco.isAvailable()) {
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("üõí –í –∫–æ—Ä–∑–∏–Ω—É", "tA/" + idTobacco.getId() + "cart")
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tA/–¢–∞–±–∞–∫–∏")
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("üè∑ *" + idTobacco.getName() + "*" +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + idTobacco.getPrice() + " —Ä—É–±.*" +
                        "\n\n" + idTobacco.getDescription().trim() +
                        "\n[_](" + idTobacco.getImg() + ")");
            } else {
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tA/–¢–∞–±–∞–∫–∏")
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("üè∑ *" + idTobacco.getName() + "* \n_(–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏)_" +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + idTobacco.getPrice() + " —Ä—É–±.*" +
                        "\n\n" + idTobacco.getDescription().trim() +
                        "\n[_](" + idTobacco.getImg() + ")");
            }
        } else if (text.contains("Tastes")) {
            Tobacco addressTobacco;
            if (text.contains("Rad")) {
                addressTobacco = TOBACCO_SERVICE.getTobaccoById(Long.parseLong(text.replace("RadTastes", "")));
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .buttons(addressTobacco.getRadonejskayaTastes(), "tA/&" + addressTobacco.getId() + "?")
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tA/id" + addressTobacco.getId())
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("*–ù–∞–ª–∏—á–∏–µ –≤–∫—É—Å–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É: –†–∞–¥–æ–Ω–µ–∂—Å–∫–∞—è 1*\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å —Ç–∞–±–∞–∫–∞:");
            } else {
                addressTobacco = TOBACCO_SERVICE.getTobaccoById(Long.parseLong(text.replace("KarTastes", "")));
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .buttons(addressTobacco.getKarlaMarksaTastes(), "tA/&" + addressTobacco.getId() + "?")
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tA/id" + addressTobacco.getId())
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("*–ù–∞–ª–∏—á–∏–µ –≤–∫—É—Å–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É: –ü—Ä–æ—Å–ø–µ–∫—Ç –ö–∞—Ä–ª–∞ –ú–∞—Ä–∫—Å–∞ 196*\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å —Ç–∞–±–∞–∫–∞:");
            }
        } else {
            editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                    .buttons(allAvailableTobaccoFortresses, "tA/")
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "m–ù–∞–ª–∏—á–∏–µ")
                    .endRow()
                    .rebuild(mes_id);
            editMessage.setText("*–ù–∞–ª–∏—á–∏–µ / –¢–∞–±–∞–∫–∏*\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–ø–æ—Å—Ç—å —Ç–∞–±–∞–∫–∞:");
        }
        return editMessage;
    }

    public EditMessageText tobaccoHandle(String text, long chat_id, long mes_id) {
        text = text.substring(1);
        EditMessageText editMessage;
        if (allTobaccoFortresses.contains(text)) {
            ArrayList<Tobacco> tobaccos = TOBACCO_SERVICE.getTobaccoByFortress(text, allTobaccos);
            editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                    .tobaccoButtons(tobaccos, "t", "")
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "t–¢–∞–±–∞–∫–∏")
                    .endRow()
                    .rebuild(mes_id);
            editMessage.setText("*–ö–∞—Ç–∞–ª–æ–≥ / –¢–∞–±–∞–∫–∏*\n–¢–∞–±–∞–∫–∏ –∫—Ä–µ–ø–æ—Å—Ç–∏: " + text);
        } else if (text.contains("cart")) {
            Tobacco crtTobacco = TOBACCO_SERVICE.getTobaccoById(Long.parseLong(text.replace("cart", "")));
            if (crtTobacco.getRadonejskayaTastes() != null && !crtTobacco.getRadonejskayaTastes().isEmpty()
                    && !crtTobacco.getRadonejskayaTastes().get(0).equals("null") && crtTobacco.getKarlaMarksaTastes() != null
                    && !crtTobacco.getKarlaMarksaTastes().isEmpty() && !crtTobacco.getKarlaMarksaTastes().get(0).equals("null")) {
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("–£–ª. –†–∞–¥–æ–Ω–µ–∂—Å–∫–∞—è 1", "t" + crtTobacco.getId() + "RadTastes")
                        .endRow()
                        .row()
                        .button("–£–ª. –ü—Ä–æ—Å–ø–µ–∫—Ç –ö–∞—Ä–ª–∞ –ú–∞—Ä–∫—Å–∞ 196", "t" + crtTobacco.getId() + "KarTastes")
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tid" + crtTobacco.getId())
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞–±–∞–∫–∞ –≤ –Ω–∞–ª–∏—á–∏–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –≤–∫—É—Å—ã:\n\n"
                        + "*—É–ª. –†–∞–¥–æ–Ω–µ–∂—Å–∫–∞—è 1* | `" + crtTobacco.getRadonejskayaTastes().toString().replace("{", "")
                        .replace("}", "") + "`\n\n*–ü—Ä–æ—Å–ø–µ–∫—Ç –ö–∞—Ä–ª–∞ –ú–∞—Ä–∫—Å–∞ 196* | `"
                        + crtTobacco.getKarlaMarksaTastes().toString().replace("{", "")
                        .replace("}", "") + "`\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω:");
            } else if (crtTobacco.getKarlaMarksaTastes() == null || crtTobacco.getKarlaMarksaTastes().isEmpty()
                    || crtTobacco.getKarlaMarksaTastes().get(0).equals("null")) {
                ArrayList<String> allTastes = crtTobacco.getRadonejskayaTastes();
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .buttons(allTastes, "t&" + crtTobacco.getId() + "?")
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tid" + crtTobacco.getId())
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("–î–∞–Ω–Ω—ã–π —Ç–∞–±–∞–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É *–£–ª. –†–∞–¥–æ–Ω–µ–∂—Å–∫–∞—è 1*.\n\n" +
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∫—É—Å:");
            } else {
                ArrayList<String> allTastes = crtTobacco.getKarlaMarksaTastes();
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .buttons(allTastes, "t&" + crtTobacco.getId() + "?")
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tid" + crtTobacco.getId())
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("–î–∞–Ω–Ω—ã–π —Ç–∞–±–∞–∫ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É *–ü—Ä–æ—Å–ø–µ–∫—Ç –ö–∞—Ä–ª–∞ –ú–∞—Ä–∫—Å–∞ 196*.\n\n" +
                        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∫—É—Å:");
            }
        } else if (text.contains("&")) {
            Tobacco tasteTobacco;
            long id = Long.parseLong(text.split("&")[1].split("\\?")[0]);
            String taste = text.split("&")[1].split("\\?")[1];
            tasteTobacco = TOBACCO_SERVICE.getTobaccoById(id);
            tasteTobacco.setTaste(taste);
            if (text.contains("up")) {
                int count = Integer.parseInt(text.split("&")[1].split("\\?")[2]);
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .countButtons("t&" + id + "?" + taste + "?" + ++count)
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tid" + id)
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("–¢–æ–≤–∞—Ä: *" + tasteTobacco.getName() + "*\n–í–∫—É—Å: " + taste +
                        "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");
            } else if (text.contains("down")) {
                int count = Integer.parseInt(text.split("&")[1].split("\\?")[2]);
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .countButtons("t&" + id + "?" + taste + "?" + --count)
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tid" + id)
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("–¢–æ–≤–∞—Ä: *" + tasteTobacco.getName() + "*\n–í–∫—É—Å: " + taste +
                        "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");
            } else if (text.contains("crt")) {
                int count = Integer.parseInt(text.split("&")[1].split("\\?")[2]);
                tasteTobacco.setCount(count);
                CART_SERVICE.addToCart(tasteTobacco, chat_id);
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("–£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", "t" + id + "delt")
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tid" + id)
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("üè∑ *" + tasteTobacco.getName() + "*" +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + tasteTobacco.getPrice() + " —Ä—É–±.*" +
                        "\n\n" + tasteTobacco.getDescription().trim() +
                        "\n[_](" + tasteTobacco.getImg() + ")");
            } else {
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .countButtons("t&" + id + "?" + taste + "?" + "1")
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tid" + id)
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("–¢–æ–≤–∞—Ä: *" + tasteTobacco.getName() + "*\n–í–∫—É—Å: " + tasteTobacco.getTaste() +
                        "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:");
            }
        } else if (text.contains("delt")) {
            Tobacco delTobacco = TOBACCO_SERVICE.getTobaccoById(Long.parseLong(text.replace("delt", "")));
            CART_SERVICE.deleteFromCart(delTobacco, chat_id);
            editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                    .row()
                    .button("üõí –í –∫–æ—Ä–∑–∏–Ω—É", "t" + delTobacco.getId() + "crt")
                    .endRow()
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "tnal")
                    .endRow()
                    .rebuild(mes_id);
            editMessage.setText("üè∑ *" + delTobacco.getName() + "*" +
                    "\n\nüíµ –¶–µ–Ω–∞:  *" + delTobacco.getPrice() + " —Ä—É–±.*" +
                    "\n\n" + delTobacco.getDescription().trim() +
                    "\n[_](" + delTobacco.getImg() + ")");
        } else if (text.contains("id")) {
            Tobacco idTobacco = TOBACCO_SERVICE.getTobaccoById(Long.parseLong(text.replace("id", "")));
            if (idTobacco.isAvailable()) {
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("üõí –í –∫–æ—Ä–∑–∏–Ω—É", "t" + idTobacco.getId() + "cart")
                        .endRow()
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "t–¢–∞–±–∞–∫–∏")
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("üè∑ *" + idTobacco.getName() + "*" +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + idTobacco.getPrice() + " —Ä—É–±.*" +
                        "\n\n" + idTobacco.getDescription().trim() +
                        "\n[_](" + idTobacco.getImg() + ")");
            } else {
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "t–¢–∞–±–∞–∫–∏")
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("üè∑ *" + idTobacco.getName() + "* \n_(–Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏)_" +
                        "\n\nüíµ –¶–µ–Ω–∞:  *" + idTobacco.getPrice() + " —Ä—É–±.*" +
                        "\n\n" + idTobacco.getDescription().trim() +
                        "\n[_](" + idTobacco.getImg() + ")");
            }
        } else if (text.contains("Tastes")) {
            Tobacco addressTobacco;
            if (text.contains("Rad")) {
                addressTobacco = TOBACCO_SERVICE.getTobaccoById(Long.parseLong(text.replace("RadTastes", "")));
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .buttons(addressTobacco.getRadonejskayaTastes(), "t&" + addressTobacco.getId() + "?")
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tid" + addressTobacco.getId())
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("*–ù–∞–ª–∏—á–∏–µ –≤–∫—É—Å–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É: –†–∞–¥–æ–Ω–µ–∂—Å–∫–∞—è 1*\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å —Ç–∞–±–∞–∫–∞:");
            } else {
                addressTobacco = TOBACCO_SERVICE.getTobaccoById(Long.parseLong(text.replace("KarTastes", "")));
                editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                        .buttons(addressTobacco.getKarlaMarksaTastes(), "t&" + addressTobacco.getId() + "?")
                        .row()
                        .button("üîô –ù–∞–∑–∞–¥", "tid" + addressTobacco.getId())
                        .endRow()
                        .rebuild(mes_id);
                editMessage.setText("*–ù–∞–ª–∏—á–∏–µ –≤–∫—É—Å–æ–≤ –ø–æ –∞–¥—Ä–µ—Å—É: –ü—Ä–æ—Å–ø–µ–∫—Ç –ö–∞—Ä–ª–∞ –ú–∞—Ä–∫—Å–∞ 196*\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫—É—Å —Ç–∞–±–∞–∫–∞:");
            }
        } else {
            editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                    .buttons(allTobaccoFortresses, "t")
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "m–ö–∞—Ç–∞–ª–æ–≥")
                    .endRow()
                    .rebuild(mes_id);
            editMessage.setText("*–ö–∞—Ç–∞–ª–æ–≥ / –¢–∞–±–∞–∫–∏*\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–µ–ø–æ—Å—Ç—å —Ç–∞–±–∞–∫–∞:");
        }
        return editMessage;
    }

    public EditMessageText cartHandle(String text, long chat_id, long mes_id) {
        text = text.substring(1);
        EditMessageText editMessage;
        if (text.equals("üõí –ö–æ—Ä–∑–∏–Ω–∞")) {
            editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                    .setText(CART_SERVICE.getUserCart(chat_id).toString())
                    .row()
                    .button("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", "c–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")
                    .endRow()
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "m–ö–∞—Ç–∞–ª–æ–≥")
                    .endRow()
                    .rebuild(mes_id);
        } else if (text.equals("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É")) {
            CART_SERVICE.clearUserCart(chat_id);
            editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                    .row()
                    .button("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–∫—É–ø–∫–∞–º", "m–ö–∞—Ç–∞–ª–æ–≥")
                    .endRow()
                    .rebuild(mes_id);
            editMessage.setText("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞!");
        } else {
            editMessage = InlineKeyboardMarkupBuilder.create(chat_id)
                    .setText("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n–¢—É—Ç —á—Ç–æ-—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å")
                    .row()
                    .button("üîô –ù–∞–∑–∞–¥", "c–ö–æ—Ä–∑–∏–Ω–∞")
                    .endRow()
                    .rebuild(mes_id);
        }
        return editMessage;
    }

    public synchronized AnswerCallbackQuery answerCallbackQuery(String callbackId, String message) {
        AnswerCallbackQuery answer = new AnswerCallbackQuery();
        answer.setCallbackQueryId(callbackId);
        answer.setShowAlert(false);
        answer.setText(message);
        answer.setShowAlert(true);
        return answer;
    }

    public void updateHandle(Update update) throws TelegramApiException {
        if (update.hasMessage() && update.getMessage().hasText()) {
            Message inMessage = update.getMessage();
            long chat_id = inMessage.getChatId();
            SendMessage outMessage = new SendMessage().setChatId(chat_id);
            String text = update.getMessage().getText();
            System.out.println(new Date() + ": " + inMessage.getFrom().getFirstName() + " " +
                    inMessage.getFrom().getLastName() + " (" + inMessage.getFrom().getUserName() +
                    "): " + text);
            execute(messageStarter(text, outMessage).setParseMode("Markdown"));
        } else if (update.hasCallbackQuery()) {
            Message inMessage = update.getCallbackQuery().getMessage();
            long chat_id = inMessage.getChatId();
            long mes_id = inMessage.getMessageId();
            String text = update.getCallbackQuery().getData();
            System.out.println(new Date() + ": " + update.getCallbackQuery().getFrom().getFirstName() + " " +
                    update.getCallbackQuery().getFrom().getLastName() + " (" + update.getCallbackQuery().getFrom().getUserName() +
                    "): " + text);
            if (text.contains("crt"))
                execute(answerCallbackQuery(update.getCallbackQuery().getId(), "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!"));
            if (text.contains("del"))
                execute(answerCallbackQuery(update.getCallbackQuery().getId(), "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!"));
            if (text.startsWith("c"))
                execute(cartHandle(text, chat_id, mes_id).setParseMode("Markdown"));
            else if (text.startsWith("h")) {
                if (text.contains("hA/"))
                    execute(availableHookahHandle(text, chat_id, mes_id).setParseMode("Markdown"));
                else
                    execute(hookahHandle(text, chat_id, mes_id).setParseMode("Markdown"));
            } else if (text.startsWith("t")) {
                if (text.contains("tA/"))
                    execute(availableTobaccoHandle(text, chat_id, mes_id).setParseMode("Markdown"));
                else
                    execute(tobaccoHandle(text, chat_id, mes_id).setParseMode("Markdown"));
            } else if (text.startsWith("m"))
                execute(messageHandle(text, chat_id, mes_id).setParseMode("Markdown"));
            else if (text.startsWith("a"))
                execute(accessoryHandle(text, chat_id, mes_id).setParseMode("Markdown"));
            else if (text.startsWith("u"))
                if (text.contains("uA/"))
                    execute(availableCharcoalHandle(text, chat_id, mes_id).setParseMode("Markdown"));
                else
                    execute(charcoalHandle(text, chat_id, mes_id).setParseMode("Markdown"));
        }
    }

    public String getBotUsername() {
        return "Grizzly_Shop_Bot";
    }

    public String getBotToken() {
        return "1238275097:AAGnnDKQpxjxCfjey6zxx0kVgm1EdDNMvak";
    }
}
